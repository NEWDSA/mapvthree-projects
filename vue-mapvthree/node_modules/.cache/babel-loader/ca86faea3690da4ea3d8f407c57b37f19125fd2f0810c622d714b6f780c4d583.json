{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-d07a5680\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["D:\\zhilian\\mapvthree-projects\\vue-mapvthree\\src\\components\\MapScene.vue"],"sourcesContent":["<template>\r\n    <div id=\"container\"></div>\r\n</template>\r\n\r\n<script>\r\nimport {GLTFLoader} from 'bmap-three/examples/jsm/loaders/GLTFLoader';\r\nimport {Engine, FlyManager, UltraDynamicSky} from 'mapv-three';\r\nimport * as THREE from 'bmap-three';\r\n\r\nexport default {\r\n    name: 'MapScene',\r\n    mixins: [],\r\n    props: {\r\n        msg: String\r\n    },\r\n    data() {\r\n        return {\r\n            config: {\r\n                center: [116.3899980, 39.9099206, 0],\r\n                pitch: 60,\r\n                zoom: 18\r\n            },\r\n            mixerArr: [],\r\n            prevTime: Date.now()\r\n        }\r\n    },\r\n    create() {\r\n\r\n    },\r\n    mounted() {\r\n        this.initScene(this.config);\r\n    },\r\n    methods: {\r\n        initMapEngine(config) {\r\n            const {center, zoom, pitch} = config;\r\n\r\n            const engine = new Engine(document.getElementById('container'), {\r\n                rendering: {\r\n                    enableAnimationLoop: true\r\n                }\r\n            });\r\n            engine.map.setCenter(center);\r\n            engine.map.setPitch(pitch);\r\n            engine.map.setZoom(zoom);\r\n\r\n            engine.rendering.useMrt = true;\r\n            engine.rendering.bloom.enabled = true;\r\n            engine.rendering.shadow.enabled = true;\r\n\r\n            // 设置（提供光源）\r\n            let sky = engine.add(new UltraDynamicSky());\r\n            sky.time = 3600 * 13.5;\r\n\r\n            const modelInfo = [\r\n                {\r\n                    position: [116.38999802501954, 39.90992061915485, 0],\r\n                    heading: 10,\r\n                    pitch: 90\r\n                },\r\n                {\r\n                    position: [116.39108091514326, 39.912365496915655, 0],\r\n                    heading: 180,\r\n                    pitch: 80\r\n                }\r\n            ];\r\n\r\n            const flyManager = engine.add(new FlyManager());\r\n            const gltfLoader = new GLTFLoader();\r\n            let me = this;\r\n            gltfLoader.load('assets/Parrot.glb', async function (gltf) {\r\n                const model = gltf.scene.children[0];\r\n                for (let i = 0; i < modelInfo.length; i++) {\r\n                    const {position, heading, pitch} = modelInfo[i];\r\n                    const instance = model.clone();\r\n                    const pos = engine.map.projectPointArr(position);\r\n                    instance.rotation.x = Math.PI * 0.5;\r\n                    instance.position.set(...pos);\r\n\r\n                    const mixer = new THREE.AnimationMixer(instance);\r\n                    mixer.clipAction(gltf.animations[0]).setDuration(1).play();\r\n                    me.mixerArr.push(mixer);\r\n\r\n                    engine.add(instance);\r\n                    engine.event.markEventProxy(instance);\r\n                    engine.event.bind(instance, 'click', e => {\r\n                        console.log(e);\r\n                        flyManager.flyTo({\r\n                            zoom: 20,\r\n                            center: position,\r\n                            pitch,\r\n                            heading\r\n                        }, {\r\n                            duration: 1000\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n\r\n            engine.rendering.addBeforeRenderListener(() => {\r\n                if (me.mixerArr) {\r\n                    const time = Date.now();\r\n                    for (let i = 0; i < me.mixerArr.length; i++) {\r\n                        me.mixerArr[i].update((time - me.prevTime) * 0.001);\r\n                    }\r\n                    me.prevTime = time;\r\n                }\r\n            });\r\n\r\n            return engine;\r\n        },\r\n\r\n        async initScene(config) {\r\n            this.initMapEngine(config);\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#container {\r\n    width: 100%;\r\n    height: 700px;\r\n}\r\n</style>\r\n  "],"mappings":";;;EACSA,EAAE,EAAC;AAAW;;uBAAnBC,mBAAA,CAA0B,OAA1BC,UAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}